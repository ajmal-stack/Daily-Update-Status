{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://S%3A/UniqueIIT_Project/MERN%20Projects/Daily%20Update%20Status/my-daily-status/src/app/daily-updates/page.js"],"sourcesContent":["'use client';\r\nimport React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport html2canvas from 'html2canvas'; // <-- import here\r\n\r\nexport default function DailyUpdatesPage() {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setShowPopup(true);\r\n  };\r\n\r\n  return (\r\n    <main className='p-4 min-h-screen bg-gray-50'>\r\n      <h1 className='text-2xl font-bold mb-6'>Select a Date</h1>\r\n\r\n      <div className='flex flex-col items-start'>\r\n        <Calendar\r\n          onClickDay={handleDateClick}\r\n          value={selectedDate}\r\n          className='react-calendar'\r\n        />\r\n      </div>\r\n\r\n      {showPopup && (\r\n        <PopupModal date={selectedDate} onClose={() => setShowPopup(false)} />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nfunction PopupModal({ date, onClose }) {\r\n  const [userName, setUserName] = useState('');\r\n  const [taskTitle, setTaskTitle] = useState('');\r\n\r\n  // 1) Function to handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // Convert date to a string (YYYY-MM-DD)\r\n    const isoDateString = date.toISOString().split('T')[0];\r\n\r\n    const payload = {\r\n      date: isoDateString,\r\n      userName,\r\n      tasks: [\r\n        {\r\n          title: taskTitle,\r\n          status: 'In Progress',\r\n          comments: '',\r\n        },\r\n      ],\r\n    };\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/daily-updates', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      if (!res.ok) throw new Error(`Error: ${res.status}`);\r\n      alert('Daily update saved!');\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error creating daily update:', error);\r\n    }\r\n  };\r\n\r\n  // 2) Screenshot function\r\n  const handleScreenshot = async () => {\r\n    // We'll capture the entire popup content\r\n    const popupEl = document.getElementById('popup-content');\r\n    if (!popupEl) return;\r\n\r\n    try {\r\n      const canvas = await html2canvas(popupEl);\r\n      const dataUrl = canvas.toDataURL('image/png');\r\n\r\n      // For demonstration: open the screenshot in a new tab\r\n      const newWindow = window.open();\r\n      if (newWindow) {\r\n        newWindow.document.write(`<img src=\"${dataUrl}\" />`);\r\n      }\r\n\r\n      // Alternatively, you could:\r\n      // - Let the user download it\r\n      // - Send it to the backend\r\n      // - Or share via email/WhatsApp (with extra steps)\r\n    } catch (err) {\r\n      console.error('Screenshot error:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='\r\n        fixed inset-0\r\n        flex items-center justify-center\r\n        bg-black bg-opacity-50\r\n      '\r\n    >\r\n      {/* ID for the element we want to capture in the screenshot */}\r\n      <div\r\n        id='popup-content'\r\n        className='bg-white rounded-md shadow-md p-6 relative w-full max-w-md mx-2'\r\n      >\r\n        <button\r\n          onClick={onClose}\r\n          className='absolute top-2 right-2 text-gray-500 hover:text-gray-700'\r\n        >\r\n          âœ•\r\n        </button>\r\n        <h2 className='text-xl font-semibold mb-4'>\r\n          Selected Date: {date.toLocaleDateString()}\r\n        </h2>\r\n\r\n        {/* Our form */}\r\n        <form onSubmit={handleSubmit} className='space-y-4'>\r\n          <div>\r\n            <label className='block font-medium mb-1'>User Name</label>\r\n            <input\r\n              type='text'\r\n              className='border border-gray-300 rounded w-full p-2'\r\n              value={userName}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className='block font-medium mb-1'>Task Title</label>\r\n            <input\r\n              type='text'\r\n              className='border border-gray-300 rounded w-full p-2'\r\n              value={taskTitle}\r\n              onChange={(e) => setTaskTitle(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            type='submit'\r\n            className='\r\n              bg-blue-600\r\n              text-white\r\n              px-4 py-2\r\n              rounded\r\n              hover:bg-blue-700\r\n              mr-4\r\n            '\r\n          >\r\n            Save Daily Update\r\n          </button>\r\n\r\n          {/* Button to trigger screenshot */}\r\n          <button\r\n            type='button'\r\n            onClick={handleScreenshot}\r\n            className='\r\n              bg-green-600\r\n              text-white\r\n              px-4 py-2\r\n              rounded\r\n              hover:bg-green-700\r\n            '\r\n          >\r\n            Take Screenshot\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}